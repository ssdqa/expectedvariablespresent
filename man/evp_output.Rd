% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evp_output.R
\name{evp_output}
\alias{evp_output}
\title{Expected Variables Present -- Output Generation}
\usage{
evp_output(
  process_output,
  output_level,
  filter_variable = NULL,
  large_n = FALSE,
  large_n_sites = NULL
)
}
\arguments{
\item{process_output}{\emph{tabular input} | the output of the \code{evp_process} function}

\item{output_level}{\emph{string} | the type of counts the output should summarise -- either \code{patient} or \code{row}}

\item{filter_variable}{\emph{string} | for \code{ms_anom_la}, \code{ms_exp_la}, \code{ss_anom_la}, the single variable that
should be displayed in the output; can be any of the variables listed in the \code{evp_process} output}

\item{large_n}{\emph{boolean} | for multi site analyses, a boolean indicating whether the large N visualization, intended for a high
volume of sites, should be used; defaults to FALSE}

\item{large_n_sites}{\emph{vector} | when large_n is TRUE, a vector of site names that can optionally generate a filtered visualization}
}
\value{
a graph to visualize the results from \code{evp_process} based on the parameters provided; see documentation
for individual subfunctions for details on specific output
}
\description{
Using the tabular output generated by \code{evp_process}, this function will build a graph to
visualize the results. Each function configuration will output a bespoke ggplot. Theming can
be adjusted by the user after the graph has been output using \code{+ theme()}. Most graphs can
also be made interactive using \code{make_interactive_squba()}
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'expectedvariablespresent'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'evp_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'expectedvariablespresent'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000), # RSQLite does not store date objects,
                                      # hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Execute `evp_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
evp_process_example <- evp_process(cohort = cohort,
                                   multi_or_single_site = 'single',
                                   anomaly_or_exploratory = 'exploratory',
                                   time = FALSE,
                                   omop_or_pcornet = 'omop',
                                   evp_variable_file = evp_variable_file_omop)

evp_process_example

#' Execute `evp_output` function
evp_output_example <- evp_output(process_output = evp_process_example,
                                 output_level = 'patient')

evp_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_squba()`

make_interactive_squba(evp_output_example)
}
